<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>k8s中搭建Nexus私仓</title>
    <link href="/2020/07/28/k8s%E4%B8%AD%E6%90%AD%E5%BB%BANexus%E7%A7%81%E4%BB%93/"/>
    <url>/2020/07/28/k8s%E4%B8%AD%E6%90%AD%E5%BB%BANexus%E7%A7%81%E4%BB%93/</url>
    
    <content type="html"><![CDATA[<p>本篇笔者将通过编写yaml文件，执行kubectl命令，搭建Maven私服Nexus3。</p><p>备注：笔者以下操作均在k8s-master1机器上执行（选择任意一个Master节点执行均可）</p><h3 id="一、编写yaml文件"><a href="#一、编写yaml文件" class="headerlink" title="一、编写yaml文件"></a>一、编写yaml文件</h3><h4 id="1、创建自定义的命名空间Namespace"><a href="#1、创建自定义的命名空间Namespace" class="headerlink" title="1、创建自定义的命名空间Namespace"></a>1、创建自定义的命名空间Namespace</h4><p>在实际的项目开发中，我们需要将容器运行在自定义的命名空间中，因此笔者在本篇也新建一个Namespace。</p><pre><code class="hljs shell">[root@k8s-master1 ~]# mkdir -p deploy/namespace[root@k8s-master1 ~]# cd deploy/namespace/[root@k8s-master1 namespace]# touch k8s-namespace.yaml[root@k8s-master1 namespace]# vi k8s-namespace.yamlapiVersion: v1kind: Namespacemetadata:  name: 你自己定义的命名空间名</code></pre><p>接着运行kubectl命令：</p><pre><code class="hljs shell">[root@k8s-master1 namespace]# kubectl apply -f k8s-namespace.yaml</code></pre><h4 id="2、编写nexus-pv-pvc-yaml"><a href="#2、编写nexus-pv-pvc-yaml" class="headerlink" title="2、编写nexus-pv-pvc.yaml"></a>2、编写nexus-pv-pvc.yaml</h4><pre><code class="hljs shell">apiVersion: v1kind: PersistentVolumemetadata:  name: nexus3-data-pv  labels:    app: nexus3-data-pvspec:  capacity:    storage: 100Gi  accessModes:    - ReadWriteOnce  persistentVolumeReclaimPolicy: Recycle  hostPath:    path: /data/maven-nexus---apiVersion: v1kind: PersistentVolumeClaimmetadata:  name: nexus3-data-pvc  labels:    app: nexus3-data-pvcspec:  accessModes:    - ReadWriteOnce  resources:    requests:      storage: 100Gi  selector:    matchLabels:      app: nexus3-data-pv</code></pre><h4 id="3、编写nexus-service-yaml"><a href="#3、编写nexus-service-yaml" class="headerlink" title="3、编写nexus-service.yaml"></a>3、编写nexus-service.yaml</h4><pre><code class="hljs shell">apiVersion: v1kind: Servicemetadata:  labels:    app: nexus3  name: nexus3spec:  type: NodePort  ports:  - port: 8081    targetPort: 8081    nodePort: 30020    name: web-ui  - port: 5000    targetPort: 5000    nodePort: 30050    name: docker-group  - port: 8889    targetPort: 8889    nodePort: 30080    name: docker-push  selector:    app: nexus3</code></pre><h4 id="4、编写nexus-deployment-yaml"><a href="#4、编写nexus-deployment-yaml" class="headerlink" title="4、编写nexus-deployment.yaml"></a>4、编写nexus-deployment.yaml</h4><pre><code class="hljs shell">kind: DeploymentapiVersion: apps/v1metadata:  labels:    app: nexus3  name: nexus3spec:  replicas: 1  selector:    matchLabels:      app: nexus3  template:    metadata:      labels:        app: nexus3    spec:      containers:        - name: nexus3          image: sonatype/nexus3:latest          imagePullPolicy: IfNotPresent          ports:          - containerPort: 8081            protocol: TCP          volumeMounts:          - name: nexus-data            mountPath: /nexus-data       volumes:        - name: nexus-data          persistentVolumeClaim:            claimName: nexus3-data-pvc      nodeSelector:        kubernetes.io/hostname: paasnexus01</code></pre><p>以上yaml文件中指定了Nexus镜像的pull地址，容器的默认端口以及宿主机的固定端口映射。另外，指定了容器运行所在的k8s节点。</p><p>查看nodes的hostname</p><pre><code class="hljs shell">[root@k8s-master1 ~]# kubectl get node --show-labelsNAME           STATUS   ROLES    AGE     VERSION   LABELSk8s-master1    Ready    &lt;none&gt;   32h     v1.18.6   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-master1,kubernetes.io/os=linuxk8s-master2    Ready    &lt;none&gt;   32h     v1.18.6   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-master2,kubernetes.io/os=linuxk8s-master3    Ready    &lt;none&gt;   32h     v1.18.6   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-master3,kubernetes.io/os=linuxk8s-node1      Ready    &lt;none&gt;   32h     v1.18.6   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-node1,kubernetes.io/os=linuxk8s-node2      Ready    &lt;none&gt;   32h     v1.18.6   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-node2,kubernetes.io/os=linuxk8s-node3      Ready    &lt;none&gt;   32h     v1.18.6   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-node3,kubernetes.io/os=linuxpaasharbor01   Ready    &lt;none&gt;   5h15m   v1.18.6   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=paasharbor01,kubernetes.io/os=linuxpaasnexus01    Ready    &lt;none&gt;   5h14m   v1.18.6   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=paasnexus01,kubernetes.io/os=linux</code></pre><p>设置指定机器运行</p><pre><code class="hljs shell">nodeSelector:  kubernetes.io/hostname: paasnexus01</code></pre><h3 id="二、执行yaml文件"><a href="#二、执行yaml文件" class="headerlink" title="二、执行yaml文件"></a>二、执行yaml文件</h3><h4 id="1、创建存放yaml文件的文件夹"><a href="#1、创建存放yaml文件的文件夹" class="headerlink" title="1、创建存放yaml文件的文件夹"></a>1、创建存放yaml文件的文件夹</h4><pre><code class="hljs shell">[root@k8s-master1 ~]# mkdir -p deploy/nexus[root@k8s-master1 ~]# cd deploy/nexus/<span class="hljs-meta">#</span><span class="bash"> 将nexus-pv-pvc.yaml，nexus-service.yaml和nexus-deployment.yaml上传到nexus文件夹中。</span></code></pre><p>另外，还要在nexus容器运行所在的宿主机上<strong>设置挂载目录的访问权限</strong>。</p><pre><code class="hljs shell">[root@PaasNexus01 ~]# mkdir -p /data/maven-nexus[root@PaasNexus01 ~]# chmod 777 /data/maven-nexus/</code></pre><h4 id="2、kubectl命令"><a href="#2、kubectl命令" class="headerlink" title="2、kubectl命令"></a>2、kubectl命令</h4><pre><code class="hljs shell">[root@k8s-master1 ~]# kubectl apply -f nexus/ -n 你自己定义的命名空间名</code></pre><h3 id="三、验证Nexus"><a href="#三、验证Nexus" class="headerlink" title="三、验证Nexus"></a>三、验证Nexus</h3><h4 id="1、切换命名空间，查看运行Pods"><a href="#1、切换命名空间，查看运行Pods" class="headerlink" title="1、切换命名空间，查看运行Pods"></a>1、切换命名空间，查看运行Pods</h4><p><img src="https://ecblog.oss-cn-hangzhou.aliyuncs.com/k8s/k8s-nexus3.png" srcset="/img/loading.gif" alt=""></p><h4 id="2、访问Nexus-UI"><a href="#2、访问Nexus-UI" class="headerlink" title="2、访问Nexus UI"></a>2、访问Nexus UI</h4><p>从上图中可以看到Nexus3容器运行在passnexus01节点，对应的机器IP：10.1.34.20</p><p>浏览器访问：<a href="http://10.1.34.20:30020/" target="_blank" rel="noopener">http://10.1.34.20:30020/</a></p><p><img src="https://ecblog.oss-cn-hangzhou.aliyuncs.com/k8s/k8s-nexus3.png" srcset="/img/loading.gif" alt=""></p><h4 id="3、修改admin密码"><a href="#3、修改admin密码" class="headerlink" title="3、修改admin密码"></a>3、修改admin密码</h4><p>进入nexus3容器运行所在的宿主机，查看初始的admin密码</p><pre><code class="hljs shell">[root@PaasNexus01 ~]# cd /data/maven-nexus/[root@PaasNexus01 maven-nexus]# cat admin.password</code></pre><p>再次访问Nexus UI，修改admin用户的密码，登录后查看</p><p><img src="https://ecblog.oss-cn-hangzhou.aliyuncs.com/k8s/k8s-nexus-ui.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>nexus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用yaml文件创建一个Kubernetes应用</title>
    <link href="/2020/07/28/%E4%BD%BF%E7%94%A8yaml%E6%96%87%E4%BB%B6%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAKubernetes%E5%BA%94%E7%94%A8/"/>
    <url>/2020/07/28/%E4%BD%BF%E7%94%A8yaml%E6%96%87%E4%BB%B6%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAKubernetes%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>本篇笔者将通过编写yaml文件，执行kubectl命令，实现Kubernetes应用的运行。为了比较方便的验证应用创建是否成功，笔者以微服务组件Eureka Server作为演示（有UI页面，方便验证）。</p><p>备注：笔者以下操作均在k8s-master1机器上执行（选择任意一个Master节点执行均可）</p><h3 id="一、编写yaml文件"><a href="#一、编写yaml文件" class="headerlink" title="一、编写yaml文件"></a>一、编写yaml文件</h3><h4 id="1、yaml语法"><a href="#1、yaml语法" class="headerlink" title="1、yaml语法"></a>1、yaml语法</h4><p>如果大家对k8s-yaml的语法还是很熟悉，可以参考博客：<a href="https://www.cnblogs.com/fuyuteng/p/9460534.html" target="_blank" rel="noopener">https://www.cnblogs.com/fuyuteng/p/9460534.html</a></p><h4 id="2、eureka-yaml"><a href="#2、eureka-yaml" class="headerlink" title="2、eureka.yaml"></a>2、eureka.yaml</h4><p>针对Eureka应用，笔者的yaml文件如下，大家可以直接复制使用，已验证。</p><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><span class="hljs-attr">metadata:</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">eureka</span>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span>  <span class="hljs-attr">labels:</span>    <span class="hljs-attr">app:</span> <span class="hljs-string">eureka</span><span class="hljs-attr">spec:</span>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span>  <span class="hljs-attr">ports:</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">8761</span>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30090</span> <span class="hljs-comment">#service对外开放端口</span>  <span class="hljs-attr">selector:</span>    <span class="hljs-attr">app:</span> <span class="hljs-string">eureka</span><span class="hljs-meta">---</span><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><span class="hljs-attr">metadata:</span>  <span class="hljs-attr">labels:</span>    <span class="hljs-attr">app:</span> <span class="hljs-string">eureka</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">eureka</span><span class="hljs-attr">spec:</span>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span> <span class="hljs-comment">#运行容器的副本数，修改这里可以快速修改分布式节点数量</span>  <span class="hljs-attr">selector:</span>    <span class="hljs-attr">matchLabels:</span>      <span class="hljs-attr">app:</span> <span class="hljs-string">eureka</span>  <span class="hljs-attr">template:</span>    <span class="hljs-attr">metadata:</span>      <span class="hljs-attr">labels:</span>        <span class="hljs-attr">app:</span> <span class="hljs-string">eureka</span>    <span class="hljs-attr">spec:</span>      <span class="hljs-attr">containers:</span> <span class="hljs-comment">#docker容器的配置</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">eureka</span>        <span class="hljs-attr">image:</span> <span class="hljs-string">taskbeez/eureka-server:master</span> <span class="hljs-comment"># pull镜像的地址</span><span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span>        <span class="hljs-attr">ports:</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8761</span> <span class="hljs-comment"># 容器对外开放端口</span></code></pre><p>设置image pull的地址，可以设置从Docker私仓拉取，这里笔者默认从DockerHub仓库拉取Eureka镜像。设置好容器的默认对外接口接口和需要运行容器的副本数。如果需要设置宿主机运行的对外端口，需要注意查看k8s的默认端口范围，可以通过如下的方式查看：</p><pre><code class="hljs shell">[root@k8s-master1 /]# cd /opt/kubernetes/cfg[root@k8s-master1 cfg]# cat kube-apiserver.conf KUBE_APISERVER_OPTS="--logtostderr=false \--v=2 \--log-dir=/opt/kubernetes/logs \--etcd-servers=https://10.1.34.69:2379,https://10.1.34.71:2379,https://10.1.34.73:2379 \--bind-address=10.1.34.68 \--secure-port=6443 \--advertise-address=10.1.34.68 \--allow-privileged=true \--service-cluster-ip-range=10.0.0.0/24 \--enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota,NodeRestriction \--authorization-mode=RBAC,Node \--enable-bootstrap-token-auth=true \--token-auth-file=/opt/kubernetes/cfg/token.csv \--service-node-port-range=30000-32767 \--kubelet-client-certificate=/opt/kubernetes/ssl/server.pem \--kubelet-client-key=/opt/kubernetes/ssl/server-key.pem \--tls-cert-file=/opt/kubernetes/ssl/server.pem  \--tls-private-key-file=/opt/kubernetes/ssl/server-key.pem \--client-ca-file=/opt/kubernetes/ssl/ca.pem \--service-account-key-file=/opt/kubernetes/ssl/ca-key.pem \--etcd-cafile=/opt/kubernetes/ssl/etcd/ca.pem \--etcd-certfile=/opt/kubernetes/ssl/etcd/server.pem \--etcd-keyfile=/opt/kubernetes/ssl/etcd/server-key.pem \--audit-log-maxage=30 \--audit-log-maxbackup=3 \--audit-log-maxsize=100 \--audit-log-path=/opt/kubernetes/logs/k8s-audit.log"</code></pre><p>如果需要修改k8s默认的端口范围，可以参考博客：<a href="https://blog.csdn.net/qq1445654576/article/details/104581296/" target="_blank" rel="noopener">https://blog.csdn.net/qq1445654576/article/details/104581296/</a> </p><h3 id="二、执行yaml文件"><a href="#二、执行yaml文件" class="headerlink" title="二、执行yaml文件"></a>二、执行yaml文件</h3><h4 id="1、创建存放yaml文件的文件夹"><a href="#1、创建存放yaml文件的文件夹" class="headerlink" title="1、创建存放yaml文件的文件夹"></a>1、创建存放yaml文件的文件夹</h4><pre><code class="hljs shell">[root@k8s-master1 ~]# mkdir -p deploy/eureka[root@k8s-master1 ~]# cd deploy/eureka/</code></pre><p>将上文中写好的eureka.yaml文件上传到eureka文件夹下。</p><h4 id="2、kubectl命令"><a href="#2、kubectl命令" class="headerlink" title="2、kubectl命令"></a>2、kubectl命令</h4><p>由于在windows电脑上编辑，空格与unix不一样，执行会导致校验yaml格式不通过。</p><pre><code class="hljs shell">[root@k8s-master1 deploy]# kubectl apply -f eureka/service/eureka unchangederror: error parsing eureka/eureka.yaml: error converting YAML to JSON: yaml: line 20: found character that cannot start any token</code></pre><p>检查到对应的位置，处理好空格，再次执行</p><pre><code class="hljs shell">[root@k8s-master1 deploy]# kubectl apply -f eureka/service/eureka createddeployment.apps/eureka created</code></pre><h3 id="三、验证k8s应用部署情况"><a href="#三、验证k8s应用部署情况" class="headerlink" title="三、验证k8s应用部署情况"></a>三、验证k8s应用部署情况</h3><h4 id="1、查看Services"><a href="#1、查看Services" class="headerlink" title="1、查看Services"></a>1、查看Services</h4><p><img src="https://ecblog.oss-cn-hangzhou.aliyuncs.com/k8s_eureka_services.png" srcset="/img/loading.gif" alt=""></p><h4 id="2、查看Deployments"><a href="#2、查看Deployments" class="headerlink" title="2、查看Deployments"></a>2、查看Deployments</h4><p><img src="https://ecblog.oss-cn-hangzhou.aliyuncs.com/k8s_eureka_deployments.png" srcset="/img/loading.gif" alt=""></p><h4 id="3、查看运行Pods"><a href="#3、查看运行Pods" class="headerlink" title="3、查看运行Pods"></a>3、查看运行Pods</h4><p><img src="https://ecblog.oss-cn-hangzhou.aliyuncs.com/k8s_eureka_pods.png" srcset="/img/loading.gif" alt=""></p><h4 id="4、访问Eureka-Server地址验证应用部署"><a href="#4、访问Eureka-Server地址验证应用部署" class="headerlink" title="4、访问Eureka Server地址验证应用部署"></a>4、访问Eureka Server地址验证应用部署</h4><p>通过查看Pods，可以看到Eureka的容器运行的3个节点分别为：k8s-node2，k8s-master1和k8s-master3，固定端口在yaml中设置的是：30090。</p><p>k8s会根据集群中的机器做动态的调度，运行在节点上。如果需要指定容器运行所在的宿主机，也是在yaml中做相应的配置修改。</p><table><thead><tr><th align="center">节点名称</th><th align="center">IP</th></tr></thead><tbody><tr><td align="center">k8s-master1</td><td align="center">10.1.34.68</td></tr><tr><td align="center">k8s-master3</td><td align="center">10.1.34.70</td></tr><tr><td align="center">k8s-node2</td><td align="center">10.1.34.72</td></tr></tbody></table><p>浏览器访问：<a href="http://10.1.34.70:30090/" target="_blank" rel="noopener">http://10.1.34.70:30090/</a></p><p><img src="https://ecblog.oss-cn-hangzhou.aliyuncs.com/k8s/70_30090_eureka.png" srcset="/img/loading.gif" alt=""></p><p>浏览器访问：<a href="http://10.1.34.72:30090/" target="_blank" rel="noopener">http://10.1.34.72:30090/</a></p><p><img src="https://ecblog.oss-cn-hangzhou.aliyuncs.com/k8s/72_30090_eureka.png" srcset="/img/loading.gif" alt=""></p><p>浏览器访问：<a href="http://10.1.34.68:30090/" target="_blank" rel="noopener">http://10.1.34.68:30090/</a></p><p><img src="https://ecblog.oss-cn-hangzhou.aliyuncs.com/k8s/68_30090_eureka.png" srcset="/img/loading.gif" alt=""></p><p>至此，通过k8s运行docker集群的示例已经验证，搭建成功。</p>]]></content>
    
    
    
    <tags>
      
      <tag>yaml</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Ansible脚本部署k8s多Master集群</title>
    <link href="/2020/07/28/%E5%9F%BA%E4%BA%8EAnsible%E8%84%9A%E6%9C%AC%E9%83%A8%E7%BD%B2k8s%E5%A4%9AMaster%E9%9B%86%E7%BE%A4/"/>
    <url>/2020/07/28/%E5%9F%BA%E4%BA%8EAnsible%E8%84%9A%E6%9C%AC%E9%83%A8%E7%BD%B2k8s%E5%A4%9AMaster%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="一、安装要求"><a href="#一、安装要求" class="headerlink" title="一、安装要求"></a>一、安装要求</h3><h4 id="1、机器要求"><a href="#1、机器要求" class="headerlink" title="1、机器要求"></a>1、机器要求</h4><p>在开始之前，部署Kubernetes集群机器需要满足以下几个条件：</p><ul><li>一台或多台机器，操作系统 CentOS7.x-86_x64</li><li>硬件配置：2GB或更多RAM，2个CPU或更多CPU，硬盘30GB或更多</li><li>集群中所有机器之间网络互通</li><li>可以访问外网，需要拉取镜像，如果服务器不能上网，需要提前下载镜像并导入节点</li><li>禁止swap分区</li></ul><p>确保所有节点系统时间一致</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> yum install ntpdate -y</span><span class="hljs-meta">#</span><span class="bash"> ntpdate time.windows.com</span></code></pre><h4 id="2、多Master架构图"><a href="#2、多Master架构图" class="headerlink" title="2、多Master架构图"></a>2、多Master架构图</h4><p><img src="https://ecblog.oss-cn-hangzhou.aliyuncs.com/multi-master.jpg" srcset="/img/loading.gif" alt=""></p><h4 id="3、多Master服务器规划"><a href="#3、多Master服务器规划" class="headerlink" title="3、多Master服务器规划"></a>3、多Master服务器规划</h4><table><thead><tr><th align="center">节点名称</th><th align="center">IP</th></tr></thead><tbody><tr><td align="center">ansible</td><td align="center">10.1.96.48</td></tr><tr><td align="center">lb-master</td><td align="center">10.1.34.74</td></tr><tr><td align="center">lb-backup</td><td align="center">10.1.34.75</td></tr><tr><td align="center">k8s-master1</td><td align="center">10.1.34.68</td></tr><tr><td align="center">k8s-master2</td><td align="center">10.1.34.69</td></tr><tr><td align="center">k8s-master3</td><td align="center">10.1.34.70</td></tr><tr><td align="center">k8s-node1</td><td align="center">10.1.34.71</td></tr><tr><td align="center">k8s-node2</td><td align="center">10.1.34.72</td></tr><tr><td align="center">k8s-node3</td><td align="center">10.1.34.7</td></tr></tbody></table><h3 id="二、下载所需文件并修改配置"><a href="#二、下载所需文件并修改配置" class="headerlink" title="二、下载所需文件并修改配置"></a>二、下载所需文件并修改配置</h3><h4 id="1、下载Ansible部署文件"><a href="#1、下载Ansible部署文件" class="headerlink" title="1、下载Ansible部署文件"></a>1、下载Ansible部署文件</h4><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> git <span class="hljs-built_in">clone</span> https://github.com/calvinGithub/ansible-install-k8s</span><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">cd</span> ansible-install-k8s</span></code></pre><p>下载软件包并上传到<strong>上面列举的机器</strong>root目录下，并解压压缩包</p><p>链接:<a href="https://pan.baidu.com/s/11-c6ZEwwKS2YsnZqlcMIyw" target="_blank" rel="noopener">https://pan.baidu.com/s/11-c6ZEwwKS2YsnZqlcMIyw</a>  密码:gsep</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> tar zxf binary_pkg.tar.gz</span></code></pre><h4 id="2、修改Ansible文件"><a href="#2、修改Ansible文件" class="headerlink" title="2、修改Ansible文件"></a>2、修改Ansible文件</h4><p>修改hosts文件，根据规划修改对应IP和名称。</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> vi hosts</span>[master]10.1.34.68 node_name=k8s-master110.1.34.69 node_name=k8s-master210.1.34.70 node_name=k8s-master3[node]10.1.34.71 node_name=k8s-node110.1.34.72 node_name=k8s-node210.1.34.73 node_name=k8s-node3[etcd]10.1.34.69 etcd_name=etcd-110.1.34.71 etcd_name=etcd-210.1.34.73 etcd_name=etcd-3[lb]10.1.34.74 lb_name=lb-master10.1.34.75 lb_name=lb-backup[k8s:children]masternode[newnode]<span class="hljs-meta">#</span><span class="bash">192.168.31.91 node_name=k8s-node4</span></code></pre><h4 id="3、修改group-vars-all-yml文件"><a href="#3、修改group-vars-all-yml文件" class="headerlink" title="3、修改group_vars/all.yml文件"></a>3、修改group_vars/all.yml文件</h4><p>修改软件包目录和证书可信任IP。</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> vim group_vars/all.yml</span><span class="hljs-meta">#</span><span class="bash"> 安装目录 </span>software_dir: '/root/binary_pkg'k8s_work_dir: '/opt/kubernetes'etcd_work_dir: '/opt/etcd'tmp_dir: '/tmp/k8s'<span class="hljs-meta">#</span><span class="bash"> 集群网络</span>service_cidr: '10.0.0.0/24'cluster_dns: '10.0.0.2'   # 与roles/addons/files/coredns.yaml中IP一致，并且是service_cidr中的IPpod_cidr: '10.244.0.0/16' # 与roles/addons/files/kube-flannel.yaml中网段一致service_nodeport_range: '30000-32767'cluster_domain: 'cluster.local'<span class="hljs-meta">#</span><span class="bash"> 高可用，如果部署单Master，该项忽略</span>vip: '10.1.34.74'nic: 'ens192' <span class="hljs-meta">#</span><span class="bash"> 自签证书可信任IP列表，为方便扩展，可添加多个预留IP</span>cert_hosts:<span class="hljs-meta">  #</span><span class="bash"> 包含所有LB、VIP、Master IP和service_cidr的第一个IP</span>  k8s:    - 10.0.0.1    - 10.1.96.48    - 10.1.34.74    - 10.1.34.75    - 10.1.34.68    - 10.1.34.69    - 10.1.34.70    - 10.1.34.71    - 10.1.34.72    - 10.1.34.73<span class="hljs-meta">  #</span><span class="bash"> 包含所有etcd节点IP</span>  etcd:    - 10.1.34.69    - 10.1.34.71    - 10.1.34.73</code></pre><h3 id="三、一键部署"><a href="#三、一键部署" class="headerlink" title="三、一键部署"></a>三、一键部署</h3><h4 id="1、centos7安装Ansible"><a href="#1、centos7安装Ansible" class="headerlink" title="1、centos7安装Ansible"></a>1、centos7安装Ansible</h4><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> yum install -y epel-release</span><span class="hljs-meta">#</span><span class="bash"> yum install ansible -y</span></code></pre><h4 id="2、多Master版启动命令"><a href="#2、多Master版启动命令" class="headerlink" title="2、多Master版启动命令"></a>2、多Master版启动命令</h4><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ansible-playbook -i hosts multi-master-deploy.yml -uroot -k</span></code></pre><p>命令结束后，可以看到生成了访问令牌</p><pre><code class="hljs shell">TASK [addons : Kubernetes Dashboard登录信息] ******************************************************************************************************************************************************ok: [10.1.34.68] =&gt; &#123;    "ui.stdout_lines": [        "访问地址---&gt;https://NodeIP:30001",         "令牌内容---&gt;eyJhbGciOiJSUzI1NiIsImtpZCI6IjNqVXMyekhlT2Vha3QwS0kwWTktaUNFYXg1TS1pSnZMajNnRE0zQllKYm8ifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4tdndnOTkiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiODY4YTlmYTMtYmY2Mi00ZjkxLWFmMDMtMzlhNGMzYmFhYjhiIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmVybmV0ZXMtZGFzaGJvYXJkOmRhc2hib2FyZC1hZG1pbiJ9.fAvxmkRuevgQ3SyhCs3xGGaQdY_YnJUzXArA2-V3UdEZQT66u4BIGi_jJGuzFZ7IIFKIZtkNlFrJRukDSyxJtgXFimmz38Aq1P3Vys5ZwryKGfSZ3KvfkNxVHcamBRihIOU4ePrHQBKOVOg6F4uENt636ZlyUj6433JtMSLYqKLtcL1ctpPEtnmUujebr8uLFaWyfMpdiSLCXHcRuoFo9EMFgLKWvhMpUbhLUhOYT_kp8H5e35i2sK7rC6ty6r-F8imClQCyKKebXr_H5hYDghwjocFN6RhN6zyJzniGF8EYW2i7qa6QECIzvUaQbQ7yM0J4D-eMPCoNHGcQdgvFuA"    ]&#125;ok: [10.1.34.70] =&gt; &#123;    "ui.stdout_lines": [        "访问地址---&gt;https://NodeIP:30001",         "令牌内容---&gt;eyJhbGciOiJSUzI1NiIsImtpZCI6IjNqVXMyekhlT2Vha3QwS0kwWTktaUNFYXg1TS1pSnZMajNnRE0zQllKYm8ifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4tdndnOTkiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiODY4YTlmYTMtYmY2Mi00ZjkxLWFmMDMtMzlhNGMzYmFhYjhiIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmVybmV0ZXMtZGFzaGJvYXJkOmRhc2hib2FyZC1hZG1pbiJ9.fAvxmkRuevgQ3SyhCs3xGGaQdY_YnJUzXArA2-V3UdEZQT66u4BIGi_jJGuzFZ7IIFKIZtkNlFrJRukDSyxJtgXFimmz38Aq1P3Vys5ZwryKGfSZ3KvfkNxVHcamBRihIOU4ePrHQBKOVOg6F4uENt636ZlyUj6433JtMSLYqKLtcL1ctpPEtnmUujebr8uLFaWyfMpdiSLCXHcRuoFo9EMFgLKWvhMpUbhLUhOYT_kp8H5e35i2sK7rC6ty6r-F8imClQCyKKebXr_H5hYDghwjocFN6RhN6zyJzniGF8EYW2i7qa6QECIzvUaQbQ7yM0J4D-eMPCoNHGcQdgvFuA"    ]&#125;ok: [10.1.34.69] =&gt; &#123;    "ui.stdout_lines": [        "访问地址---&gt;https://NodeIP:30001",         "令牌内容---&gt;eyJhbGciOiJSUzI1NiIsImtpZCI6IjNqVXMyekhlT2Vha3QwS0kwWTktaUNFYXg1TS1pSnZMajNnRE0zQllKYm8ifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4tdndnOTkiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiODY4YTlmYTMtYmY2Mi00ZjkxLWFmMDMtMzlhNGMzYmFhYjhiIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmVybmV0ZXMtZGFzaGJvYXJkOmRhc2hib2FyZC1hZG1pbiJ9.fAvxmkRuevgQ3SyhCs3xGGaQdY_YnJUzXArA2-V3UdEZQT66u4BIGi_jJGuzFZ7IIFKIZtkNlFrJRukDSyxJtgXFimmz38Aq1P3Vys5ZwryKGfSZ3KvfkNxVHcamBRihIOU4ePrHQBKOVOg6F4uENt636ZlyUj6433JtMSLYqKLtcL1ctpPEtnmUujebr8uLFaWyfMpdiSLCXHcRuoFo9EMFgLKWvhMpUbhLUhOYT_kp8H5e35i2sK7rC6ty6r-F8imClQCyKKebXr_H5hYDghwjocFN6RhN6zyJzniGF8EYW2i7qa6QECIzvUaQbQ7yM0J4D-eMPCoNHGcQdgvFuA"    ]&#125;</code></pre><h3 id="四、测试部署情况"><a href="#四、测试部署情况" class="headerlink" title="四、测试部署情况"></a>四、测试部署情况</h3><h4 id="1、访问Dashboard"><a href="#1、访问Dashboard" class="headerlink" title="1、访问Dashboard"></a>1、访问Dashboard</h4><p>随便访问任何一个节点，<a href="https://Node:30001" target="_blank" rel="noopener">https://Node:30001</a> ，并输入上面输出的token。</p><p><img src="https://ecblog.oss-cn-hangzhou.aliyuncs.com/k8s_login.png" srcset="/img/loading.gif" alt=""></p><p>登录后，点击Nodes，可以看到加入到k8s集群的所有节点，默认命名空间为default。</p><p><img src="https://ecblog.oss-cn-hangzhou.aliyuncs.com/%E5%A4%9AMaster%E9%9B%86%E7%BE%A4Node.png" srcset="/img/loading.gif" alt="image-20200718231233862"></p><p>进入页面后，点击左侧导航栏Nodes，可以看到目前加入k8s的服务器节点。</p><p><img src="https://ecblog.oss-cn-hangzhou.aliyuncs.com/image-20200718231355987.png" srcset="/img/loading.gif" alt="image-20200718231355987"></p><h4 id="2、使用kubectl命令查看容器"><a href="#2、使用kubectl命令查看容器" class="headerlink" title="2、使用kubectl命令查看容器"></a>2、使用kubectl命令查看容器</h4><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 在任意一个master节点使用命令查看nodes</span>[root@k8s-master1 ~]# kubectl get nodesNAME           STATUS   ROLES    AGE    VERSIONk8s-master1    Ready    &lt;none&gt;   29h    v1.18.6k8s-master2    Ready    &lt;none&gt;   29h    v1.18.6k8s-master3    Ready    &lt;none&gt;   29h    v1.18.6k8s-node1      Ready    &lt;none&gt;   29h    v1.18.6k8s-node2      Ready    &lt;none&gt;   29h    v1.18.6k8s-node3      Ready    &lt;none&gt;   29h    v1.18.6</code></pre><p>至此，多Master的k8s集群已经搭建成功。</p><h3 id="五、增加集群节点"><a href="#五、增加集群节点" class="headerlink" title="五、增加集群节点"></a>五、增加集群节点</h3><h4 id="1、修改hosts文件添加新节点ip"><a href="#1、修改hosts文件添加新节点ip" class="headerlink" title="1、修改hosts文件添加新节点ip"></a>1、修改hosts文件添加新节点ip</h4><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> vi hosts</span>[newnode]10.1.34.20 node_name=PaasNexus0110.1.34.7  node_name=PaasHarbor01</code></pre><h4 id="2、执行部署命令"><a href="#2、执行部署命令" class="headerlink" title="2、执行部署命令"></a>2、执行部署命令</h4><pre><code class="hljs shell">ansible-playbook -i hosts add-node.yml -uroot -k</code></pre><h4 id="3、在任一Master节点允许颁发证书并加入集群"><a href="#3、在任一Master节点允许颁发证书并加入集群" class="headerlink" title="3、在任一Master节点允许颁发证书并加入集群"></a>3、在任一Master节点允许颁发证书并加入集群</h4><pre><code class="hljs shell">[root@k8s-master1 ~]# kubectl get csrNAME                                                   AGE    SIGNERNAME               REQUESTOR           CONDITIONnode-csr-lGmQlYI-ByUQGy0F7Deox0vfkKJuWZX0gh3rPodClOA   117m   kubernetes.io/kube-apiserver-client-kubelet   kubelet-bootstrap   Pending[root@k8s-master1 ~]# kubectl certificate approve node-csr-lGmQlYI-ByUQGy0F7Deox0vfkKJuWZX0gh3rPodClOAcertificatesigningrequest.certificates.k8s.io/node-csr-lGmQlYI-ByUQGy0F7Deox0vfkKJuWZX0gh3rPodClOA approved</code></pre><p>接着用命令查看节点</p><pre><code class="hljs shell">[root@k8s-master1 ~]# kubectl get nodesNAME           STATUS   ROLES    AGE    VERSIONk8s-master1    Ready    &lt;none&gt;   29h    v1.18.6k8s-master2    Ready    &lt;none&gt;   29h    v1.18.6k8s-master3    Ready    &lt;none&gt;   29h    v1.18.6k8s-node1      Ready    &lt;none&gt;   29h    v1.18.6k8s-node2      Ready    &lt;none&gt;   29h    v1.18.6k8s-node3      Ready    &lt;none&gt;   29h    v1.18.6paasharbor01   Ready    &lt;none&gt;   152m   v1.18.6paasnexus01    Ready    &lt;none&gt;   152m   v1.18.6</code></pre><p>k8s Dashboard页面查看Nodes</p><p><img src="https://ecblog.oss-cn-hangzhou.aliyuncs.com/%E6%96%B0%E5%A2%9Ek8s%E8%8A%82%E7%82%B9.png" srcset="/img/loading.gif" alt="image-20200728160021747"></p><p>最后还需要注意一点，为了新加入的节点能够彼此通信，还需要在master节点和新增加的机器下增加hosts映射。</p><p>其中10.1.34.20 PaasNexus01和10.1.34.7  PaasHarbor01是新增的机器，需要补充的。</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> vi /etc/hosts</span>127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain610.1.34.68 k8s-master110.1.34.69 k8s-master210.1.34.70 k8s-master310.1.34.71 k8s-node110.1.34.72 k8s-node210.1.34.73 k8s-node310.1.34.20 PaasNexus0110.1.34.7  PaasHarbor01</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>k8s多Master</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Ansible脚本部署k8s单Master集群</title>
    <link href="/2020/07/28/%E5%9F%BA%E4%BA%8EAnsible%E8%84%9A%E6%9C%AC%E9%83%A8%E7%BD%B2k8s%E5%8D%95Master%E9%9B%86%E7%BE%A4/"/>
    <url>/2020/07/28/%E5%9F%BA%E4%BA%8EAnsible%E8%84%9A%E6%9C%AC%E9%83%A8%E7%BD%B2k8s%E5%8D%95Master%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="一、安装要求"><a href="#一、安装要求" class="headerlink" title="一、安装要求"></a>一、安装要求</h3><h4 id="1、机器要求"><a href="#1、机器要求" class="headerlink" title="1、机器要求"></a>1、机器要求</h4><p>在开始之前，部署Kubernetes集群机器需要满足以下几个条件：</p><ul><li>一台或多台机器，操作系统 CentOS7.x-86_x64</li><li>硬件配置：2GB或更多RAM，2个CPU或更多CPU，硬盘30GB或更多</li><li>集群中所有机器之间网络互通</li><li>可以访问外网，需要拉取镜像，如果服务器不能上网，需要提前下载镜像并导入节点</li><li>禁止swap分区</li></ul><p>确保所有节点系统时间一致</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> yum install ntpdate -y</span><span class="hljs-meta">#</span><span class="bash"> ntpdate time.windows.com</span></code></pre><h4 id="2、单Master架构图"><a href="#2、单Master架构图" class="headerlink" title="2、单Master架构图"></a>2、单Master架构图</h4><p><img src="https://ecblog.oss-cn-hangzhou.aliyuncs.com/single-master.jpg" srcset="/img/loading.gif" alt="single-master"></p><h4 id="3、单Master服务器规划"><a href="#3、单Master服务器规划" class="headerlink" title="3、单Master服务器规划"></a>3、单Master服务器规划</h4><table><thead><tr><th align="center">节点名称</th><th align="center">IP</th></tr></thead><tbody><tr><td align="center">etcd-1</td><td align="center">10.10.10.8</td></tr><tr><td align="center">k8s-node01</td><td align="center">10.10.10.9</td></tr><tr><td align="center">k8s-node02</td><td align="center">10.10.10.10</td></tr></tbody></table><h3 id="二、下载所需文件并修改配置"><a href="#二、下载所需文件并修改配置" class="headerlink" title="二、下载所需文件并修改配置"></a>二、下载所需文件并修改配置</h3><h4 id="1、下载Ansible部署文件"><a href="#1、下载Ansible部署文件" class="headerlink" title="1、下载Ansible部署文件"></a>1、下载Ansible部署文件</h4><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> git <span class="hljs-built_in">clone</span> https://github.com/calvinGithub/ansible-install-k8s</span><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">cd</span> ansible-install-k8s</span></code></pre><p>下载软件包并上传到<strong>上面列举的机器</strong>root目录下，并解压压缩包</p><p>链接:<a href="https://pan.baidu.com/s/11-c6ZEwwKS2YsnZqlcMIyw" target="_blank" rel="noopener">https://pan.baidu.com/s/11-c6ZEwwKS2YsnZqlcMIyw</a>  密码:gsep</p><pre><code class="hljs css"># <span class="hljs-selector-tag">tar</span> <span class="hljs-selector-tag">zxf</span> <span class="hljs-selector-tag">binary_pkg</span><span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span></code></pre><h4 id="2、修改Ansible文件"><a href="#2、修改Ansible文件" class="headerlink" title="2、修改Ansible文件"></a>2、修改Ansible文件</h4><p>修改hosts文件，根据规划修改对应IP和名称。</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> vi hosts</span>[master]<span class="hljs-meta">#</span><span class="bash"> 如果部署单Master，只保留一个Master节点</span><span class="hljs-meta">#</span><span class="bash"> 默认Naster节点也部署Node组件</span>10.10.10.8 node_name=k8s-master01[node]10.10.10.9 node_name=k8s-node0110.10.10.10 node_name=k8s-node02[etcd]10.10.10.8 etcd_name=etcd-110.10.10.9 etcd_name=etcd-210.10.10.10 etcd_name=etcd-3[lb]<span class="hljs-meta">#</span><span class="bash"> 如果部署单Master，该项忽略</span>192.168.31.63 lb_name=lb-master192.168.31.71 lb_name=lb-backup[k8s:children]masternode[newnode]<span class="hljs-meta">#</span><span class="bash">192.168.31.91 node_name=k8s-node3</span></code></pre><h4 id="3、修改group-vars-all-yml文件"><a href="#3、修改group-vars-all-yml文件" class="headerlink" title="3、修改group_vars/all.yml文件"></a>3、修改group_vars/all.yml文件</h4><p>修改软件包目录和证书可信任IP。</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> vim group_vars/all.yml</span><span class="hljs-meta">#</span><span class="bash"> 安装目录 </span>software_dir: '/root/binary_pkg'k8s_work_dir: '/opt/kubernetes'etcd_work_dir: '/opt/etcd'tmp_dir: '/tmp/k8s'<span class="hljs-meta">#</span><span class="bash"> 集群网络</span>service_cidr: '10.0.0.0/24'cluster_dns: '10.0.0.2'   # 与roles/addons/files/coredns.yaml中IP一致，并且是service_cidr中的IPpod_cidr: '10.244.0.0/16' # 与roles/addons/files/kube-flannel.yaml中网段一致service_nodeport_range: '30000-32767'cluster_domain: 'cluster.local'<span class="hljs-meta">#</span><span class="bash"> 高可用，如果部署单Master，该项忽略</span>vip: '192.168.31.88'nic: 'ens33' <span class="hljs-meta">#</span><span class="bash"> 自签证书可信任IP列表，为方便扩展，可添加多个预留IP</span>cert_hosts:<span class="hljs-meta">  #</span><span class="bash"> 包含所有LB、VIP、Master IP和service_cidr的第一个IP</span>  k8s:    - 10.0.0.1    - 10.10.10.8    - 10.10.10.9    - 10.10.10.10<span class="hljs-meta">  #</span><span class="bash"> 包含所有etcd节点IP</span>  etcd:    - 10.10.10.8    - 10.10.10.9    - 10.10.10.10</code></pre><h3 id="三、一键部署"><a href="#三、一键部署" class="headerlink" title="三、一键部署"></a>三、一键部署</h3><h4 id="1、centos7安装Ansible"><a href="#1、centos7安装Ansible" class="headerlink" title="1、centos7安装Ansible"></a>1、centos7安装Ansible</h4><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> yum install -y epel-release</span><span class="hljs-meta">#</span><span class="bash"> yum install ansible -y</span></code></pre><h4 id="2、单Master版启动命令"><a href="#2、单Master版启动命令" class="headerlink" title="2、单Master版启动命令"></a>2、单Master版启动命令</h4><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ansible-playbook -i hosts single-master-deploy.yml -uroot -k</span></code></pre><p>命令结束后，可以看到生成了访问令牌</p><p><img src="https://ecblog.oss-cn-hangzhou.aliyuncs.com/image-20200718230920066.png" srcset="/img/loading.gif" alt="image-20200718230920066"></p><pre><code class="hljs shell">eyJhbGciOiJSUzI1NiIsImtpZCI6IjFhMTN5LXdUVFN6TVVoNmZ1dUltVngyTmxvMXNKejFTYkZkbldaNWhWdXcifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4tcXRyNmwiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiYWY5YWIyNmMtN2MwZC00MTZkLWJhYmMtZTMwMWY5MDBmMjU0Iiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmVybmV0ZXMtZGFzaGJvYXJkOmRhc2hib2FyZC1hZG1pbiJ9.4gRDjg8It_8h0LInLHXrchsUCcdH0UerDDkCdd2y_UnKwc6wAhReDQYc2NaYVda2704Hu7-n7_fXFATQ_bf6noBjoQNsCEJ1NwBl0DO4h3l_i80YIVT9R2yl1nEq6CY5Da7rR01pp6-Htih1mpEb-O_xsP_L6FrsVjKBubY63gK4O9LQLQSnoEE-24ggg2VgyS5rVHTTDlEpq3J0XeqXiBbaZJa8o65Yg08sKzeHAffgY2538p-9ZV5-tJAsL4wbud8TjSXCzWkxsVsmH7Au0ZwRrth1tVrVEqoPGOusDVu6sFxSO53lpwsvlcg1TpKIxNMEbDTQ6GSJbPA_dyeW9Q</code></pre><h3 id="四、测试部署情况"><a href="#四、测试部署情况" class="headerlink" title="四、测试部署情况"></a>四、测试部署情况</h3><h4 id="1、访问Dashboard"><a href="#1、访问Dashboard" class="headerlink" title="1、访问Dashboard"></a>1、访问Dashboard</h4><p>随便访问任何一个节点，<a href="https://Node:30001" target="_blank" rel="noopener">https://Node:30001</a></p><p><img src="https://ecblog.oss-cn-hangzhou.aliyuncs.com/image-20200718231233862.png" srcset="/img/loading.gif" alt="image-20200718231233862"></p><p>进入页面后，点击左侧导航栏Nodes，可以看到目前加入k8s的服务器节点。</p><p><img src="https://ecblog.oss-cn-hangzhou.aliyuncs.com/image-20200718231355987.png" srcset="/img/loading.gif" alt="image-20200718231355987"></p><h4 id="2、使用kubectl命令查看容器"><a href="#2、使用kubectl命令查看容器" class="headerlink" title="2、使用kubectl命令查看容器"></a>2、使用kubectl命令查看容器</h4><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 1.查看nodes</span>[root@k8s-master01 ansible-install-k8s]# kubectl get nodeNAME           STATUS   ROLES    AGE   VERSIONk8s-master01   Ready    &lt;none&gt;   15m   v1.18.6k8s-node01     Ready    &lt;none&gt;   15m   v1.18.6k8s-node02     Ready    &lt;none&gt;   15m   v1.18.6<span class="hljs-meta">#</span><span class="bash"> 2.创建应用nginx</span>[root@k8s-master01 ansible-install-k8s]# kubectl create deployment web --image=nginxdeployment.apps/web created<span class="hljs-meta">#</span><span class="bash"> 3.启动应用nginx</span>[root@k8s-master01 ansible-install-k8s]# kubectl expose deployment web --port=80 --target-port=80 --name=web --type=NodePortservice/web exposed<span class="hljs-meta">#</span><span class="bash"> 4.查看所有启动的应用(30794即为容器80端口对应的宿主机映射端口)</span>[root@k8s-master01 ansible-install-k8s]# kubectl get svcNAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)        AGEkubernetes   ClusterIP   10.0.0.1     &lt;none&gt;        443/TCP        32mweb          NodePort    10.0.0.95    &lt;none&gt;        80:30794/TCP   38s</code></pre><h4 id="3、Dashboard查看运行容器"><a href="#3、Dashboard查看运行容器" class="headerlink" title="3、Dashboard查看运行容器"></a>3、Dashboard查看运行容器</h4><p><img src="https://ecblog.oss-cn-hangzhou.aliyuncs.com/image-20200718232547965.png" srcset="/img/loading.gif" alt="image-20200718232547965"></p><p>可以看到测试用的web容器已经启动，查看容器日志</p><p><img src="https://ecblog.oss-cn-hangzhou.aliyuncs.com/image-20200718232658162.png" srcset="/img/loading.gif" alt="image-20200718232658162"></p><p>浏览器访问：<a href="http://10.10.10.9:30794/" target="_blank" rel="noopener">http://10.10.10.9:30794/</a></p><p><img src="https://ecblog.oss-cn-hangzhou.aliyuncs.com/image-20200718232858065.png" srcset="/img/loading.gif" alt="image-20200718232858065"></p><p>至此，单Master的k8s集群及部署docker应用已经成功。</p>]]></content>
    
    
    
    <tags>
      
      <tag>k8s单Master</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7安装Ansible异常问题排查</title>
    <link href="/2020/07/28/Centos7%E5%AE%89%E8%A3%85Ansible%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    <url>/2020/07/28/Centos7%E5%AE%89%E8%A3%85Ansible%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<p>目标：Centos7系统的机器安装Ansible</p><p>yum源：阿里云</p><p>外网：虚拟机可以连接外网</p><p>出现的问题：直接用命令yum -y install ansible，发现安装不上。</p><p><img src="https://ecblog.oss-cn-hangzhou.aliyuncs.com/k8s/ansible.png" srcset="/img/loading.gif" alt="image-20200724112514837"></p><p><strong>问题排查</strong>：</p><p>（1）原来安装ansible，需要先安装epel源</p><p>（2）<strong>yum install epel-release</strong></p><p><img src="https://ecblog.oss-cn-hangzhou.aliyuncs.com/k8s/epel.png" srcset="/img/loading.gif" alt="image-20200724112635120"></p><p>然后<strong>yum repolis</strong>t查看源，发现并没有epel。</p><p>（3）排查机器上是否已经存在epel源：<strong>yum list installed|grep epel</strong></p><p>发现确实存在，先移除：<strong>yum remove epel-release.noarch</strong></p><p>（4）重新下载安装epel源</p><pre><code class="hljs shell">wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpmrpm -ivh epel-release-latest-7.noarch.rpm</code></pre><p>接着查看源：<strong>yum repolist</strong>，发现epel源已经存在</p><p><img src="https://ecblog.oss-cn-hangzhou.aliyuncs.com/k8s/repolist.png" srcset="/img/loading.gif" alt="image-20200724113312221"></p><p>（5）最后重新用命令：<strong>yum install ansible -y</strong> 安装Ansible即可。</p><p><img src="https://ecblog.oss-cn-hangzhou.aliyuncs.com/k8s/ansible_version.png" srcset="/img/loading.gif" alt="image-20200724113350777"></p>]]></content>
    
    
    
    <tags>
      
      <tag>ansible</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
