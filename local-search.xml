<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>基于数据库实现微服务动态路由</title>
    <link href="/2020/07/05/%E5%9F%BA%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/"/>
    <url>/2020/07/05/%E5%9F%BA%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/</url>
    
    <content type="html"><![CDATA[<h4 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h4><p>随着微服务在各个项目中使用越来越普遍，大多数公司选择使用Spring Cloud框架或者Dubbo来实现项目落地。</p><p>因此，在说动态路由之前，笔者先带大家来对比下这两个框架。</p><ul><li>从性能效率上来看：dubbo 使用了 netty 比 spring cloud 的 http 快很多。大概是 2 倍的差距。 </li><li>从开发效率上来看：公司同学一般都会 spring，入门 spring cloud 的门槛低且与 spring 融合度更高。dubbo 相对会花一些学习成本。 </li><li>从社区活跃度来看：spring cloud 的活跃度明显高于 dubbo。而后续 dubbo 看到了微服务的流行，也逐渐恢复了更新。</li><li>从生态圈上来看：spring cloud 周边组件很多，通过 starter 自动装配即拿即用。而 dubbo 得自己集成其他的框架。 </li></ul><p>笔者所在的公司选择的Spring Cloud技术栈，主要有以下两个原因 ：</p><ol><li>对于性能没有极致的要求。 </li><li>想尽快产出，减少学习成本，增加开发效率，减少企业成本。</li></ol><p>网关分为Zuul，Kong，Nginx代理以及自研四种，一般中小公司使用Zuul即可。接着我们来了解下网关的作用，主要包括：<strong>动态路由，灰度发布，鉴权认证，性能监控，限流熔断</strong>等。</p><h4 id="二、搭建基础环境"><a href="#二、搭建基础环境" class="headerlink" title="二、搭建基础环境"></a>二、搭建基础环境</h4><p>首先我们得去搭建三个服务，分别为注册中心：eureka-server，网关中心：zuul-gateway，还有个就是应用服务，就以库存服务为例：inventory-api。</p><p>在网关中配置路由，传统的做法如下：</p><pre><code class="hljs yml"><span class="hljs-attr">zuul:</span>  <span class="hljs-attr">prefix:</span> <span class="hljs-string">/api</span> <span class="hljs-comment"># 添加路由前缀</span>  <span class="hljs-attr">retryable:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">sensitive-headers:</span>  <span class="hljs-attr">add-host-header:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">routes:</span>    <span class="hljs-attr">inventory-api:</span>      <span class="hljs-attr">path:</span> <span class="hljs-string">/inventory/**</span>      <span class="hljs-attr">service:</span> <span class="hljs-string">inventory-api</span>      <span class="hljs-attr">strip-prefix:</span> <span class="hljs-literal">true</span></code></pre><p>试想，随着我们的应用可能越来越多，如果在生产环境通过暂停网关服务，修改网关的路由配置，接着上线，对于很多公司的业务来说，会有较大的影响。因此我们就得考虑改造Zuul网关，通过<strong>动态路由</strong>来将我们的服务实现路由配置。</p><p>我们先来在库存服务中，新增一个简单的API接口</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.calvin.api;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Title</span> DemoController</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> Demo测试</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> calvin</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020/3/11 4:59 PM </span><span class="hljs-comment"> */</span><span class="hljs-meta">@RestController</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"demo"</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoController</span> </span>&#123;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"test"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">demoTest</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"SUCCESS"</span>;    &#125;&#125;</code></pre><p>先测试不通过路由访问：<a href="http://localhost:10020/demo/test" target="_blank" rel="noopener">http://localhost:10020/demo/test</a></p><p>![image-20200311170624756](/Users/calvin/Library/Application Support/typora-user-images/image-20200311170624756.png)</p><p>接着根据网关服务里面配置好的路由，来根据路由访问：<a href="http://localhost:10010/api/inventory/demo/test" target="_blank" rel="noopener">http://localhost:10010/api/inventory/demo/test</a></p><p>![image-20200311194207321](/Users/calvin/Library/Application Support/typora-user-images/image-20200311194207321.png)</p><h4 id="三、改造网关服务"><a href="#三、改造网关服务" class="headerlink" title="三、改造网关服务"></a>三、改造网关服务</h4><p>首先我们得先将刚才在网关服务里面配置的路由注释掉。</p><p>![image-20200311194922163](/Users/calvin/Library/Application Support/typora-user-images/image-20200311194922163.png)</p><p>设计思路：网关服务定时去读取数据库中新定义的路由表，通过路由表中的数据，实现路由管理。</p><p>定义路由表：<strong>gateway_api_route</strong>，并插入一条数据，数据为inventory-api服务。</p><pre><code class="hljs mysql">DROP TABLE IF EXISTS &#96;gateway_api_route&#96;;CREATE TABLE &#96;gateway_api_route&#96; (  &#96;id&#96; tinyint(10) NOT NULL AUTO_INCREMENT,  &#96;path&#96; varchar(255) NOT NULL,  &#96;service_id&#96; varchar(50) DEFAULT NULL,  &#96;url&#96; varchar(255) DEFAULT NULL,  &#96;retryable&#96; tinyint(1) DEFAULT NULL,  &#96;enabled&#96; tinyint(1) NOT NULL,  &#96;strip_prefix&#96; int(11) DEFAULT NULL,  &#96;api_name&#96; varchar(255) DEFAULT NULL,  PRIMARY KEY (&#96;id&#96;)) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;0 DEFAULT CHARSET&#x3D;utf8; INSERT INTO &#96;gateway_api_route&#96;(&#96;id&#96;, &#96;path&#96;, &#96;service_id&#96;, &#96;url&#96;, &#96;retryable&#96;, &#96;enabled&#96;, &#96;strip_prefix&#96;, &#96;api_name&#96;) VALUES (1, &#39;&#x2F;inventory&#x2F;**&#39;, &#39;inventory-api&#39;, &#39;&#39;, 1, 1, 1, &#39;inventory-api&#39;);</code></pre><p>接着就是代码实现部分了。（使用通用tk-mapper操作数据库，详见代码）</p><p><strong>（1）定义实体类</strong></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.calvin.entity;<span class="hljs-keyword">import</span> javax.persistence.Entity;<span class="hljs-keyword">import</span> javax.persistence.GeneratedValue;<span class="hljs-keyword">import</span> javax.persistence.Id;<span class="hljs-keyword">import</span> javax.persistence.Table;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-keyword">import</span> tk.mybatis.mapper.annotation.KeySql;<span class="hljs-meta">@Data</span><span class="hljs-meta">@Entity</span><span class="hljs-meta">@Table</span>(name = <span class="hljs-string">"gateway_api_route"</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GatewayApiRoute</span> </span>&#123;    <span class="hljs-meta">@Id</span>    <span class="hljs-meta">@KeySql</span>(useGeneratedKeys = <span class="hljs-keyword">true</span>)    <span class="hljs-meta">@GeneratedValue</span>    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String path;    <span class="hljs-keyword">private</span> String serviceId;    <span class="hljs-keyword">private</span> String url;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> stripPrefix = <span class="hljs-keyword">true</span>;    <span class="hljs-keyword">private</span> Boolean retryable;    <span class="hljs-keyword">private</span> Boolean enabled;&#125;</code></pre><p><strong>（2）获取路由配置信息</strong></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.calvin.config;<span class="hljs-keyword">import</span> com.calvin.entity.GatewayApiRoute;<span class="hljs-keyword">import</span> com.calvin.mapper.GatewayApiRouteMapper;<span class="hljs-keyword">import</span> java.util.LinkedHashMap;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<span class="hljs-keyword">import</span> org.springframework.beans.BeanUtils;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.cloud.netflix.zuul.filters.RefreshableRouteLocator;<span class="hljs-keyword">import</span> org.springframework.cloud.netflix.zuul.filters.SimpleRouteLocator;<span class="hljs-keyword">import</span> org.springframework.cloud.netflix.zuul.filters.ZuulProperties;<span class="hljs-keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;<span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 获取路由配置信息</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Slf</span>4j<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DynamicRouteLocator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SimpleRouteLocator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">RefreshableRouteLocator</span> </span>&#123;    <span class="hljs-keyword">private</span> ZuulProperties properties;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> GatewayApiRouteMapper gatewayApiRouteMapper;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DynamicRouteLocator</span><span class="hljs-params">(String servletPath, ZuulProperties properties)</span> </span>&#123;        <span class="hljs-keyword">super</span>(servletPath, properties);        <span class="hljs-keyword">this</span>.properties = properties;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">refresh</span><span class="hljs-params">()</span> </span>&#123;        doRefresh();    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 修改路由对象信息</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> Map&lt;String, ZuulProperties.ZuulRoute&gt; locateRoutes() &#123;        LinkedHashMap&lt;String, ZuulProperties.ZuulRoute&gt; routesMap = <span class="hljs-keyword">new</span> LinkedHashMap&lt;&gt;();        <span class="hljs-comment">// 加载application.yml中的路由表</span>        routesMap.putAll(<span class="hljs-keyword">super</span>.locateRoutes());        <span class="hljs-comment">// 加载db中的路由表</span>        routesMap.putAll(locateRoutesFromDB());        <span class="hljs-comment">// 统一处理一下路由path的格式</span>        LinkedHashMap&lt;String, ZuulProperties.ZuulRoute&gt; values = <span class="hljs-keyword">new</span> LinkedHashMap&lt;&gt;();        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, ZuulProperties.ZuulRoute&gt; entry : routesMap.entrySet()) &#123;            String path = entry.getKey();            <span class="hljs-keyword">if</span> (!path.startsWith(<span class="hljs-string">"/"</span>)) &#123;                path = <span class="hljs-string">"/"</span> + path;            &#125;            <span class="hljs-keyword">if</span> (StringUtils.hasText(<span class="hljs-keyword">this</span>.properties.getPrefix())) &#123;                path = <span class="hljs-keyword">this</span>.properties.getPrefix() + path;                <span class="hljs-keyword">if</span> (!path.startsWith(<span class="hljs-string">"/"</span>)) &#123;                    path = <span class="hljs-string">"/"</span> + path;                &#125;            &#125;            log.info(<span class="hljs-string">"path:&#123;&#125;,value:&#123;&#125;"</span>, path, entry.getValue());            values.put(path, entry.getValue());        &#125;        <span class="hljs-keyword">return</span> values;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 从数据库读取zuul路由规则</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> Map&lt;String, ZuulProperties.ZuulRoute&gt; locateRoutesFromDB() &#123;        Map&lt;String, ZuulProperties.ZuulRoute&gt; routes = <span class="hljs-keyword">new</span> LinkedHashMap&lt;&gt;();        GatewayApiRoute gatewayApiRoute = <span class="hljs-keyword">new</span> GatewayApiRoute();        gatewayApiRoute.setEnabled(Boolean.TRUE);        <span class="hljs-comment">// 查询所有生效的路由</span>        List&lt;GatewayApiRoute&gt; results = gatewayApiRouteMapper.select(gatewayApiRoute);        <span class="hljs-keyword">for</span> (GatewayApiRoute result : results) &#123;            <span class="hljs-keyword">if</span> (StringUtils.isEmpty(result.getPath())) &#123;                <span class="hljs-keyword">continue</span>;            &#125;            <span class="hljs-keyword">if</span> (StringUtils.isEmpty(result.getServiceId()) &amp;&amp; StringUtils.isEmpty(result.getUrl())) &#123;                <span class="hljs-keyword">continue</span>;            &#125;            ZuulProperties.ZuulRoute zuulRoute = <span class="hljs-keyword">new</span> ZuulProperties.ZuulRoute();            <span class="hljs-keyword">try</span> &#123;                BeanUtils.copyProperties(result, zuulRoute);            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;                e.printStackTrace();            &#125;            routes.put(zuulRoute.getPath(), zuulRoute);        &#125;        <span class="hljs-keyword">return</span> routes;    &#125;&#125;</code></pre><p><strong>（3）声明Bean</strong></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.calvin.config;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.web.ServerProperties;<span class="hljs-keyword">import</span> org.springframework.cloud.netflix.zuul.filters.ZuulProperties;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DynamicRouteConfiguration</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> ZuulProperties zuulProperties;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> ServerProperties server;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> DynamicRouteLocator <span class="hljs-title">routeLocator</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DynamicRouteLocator(server.getServlet().getServletPrefix(), <span class="hljs-keyword">this</span>.zuulProperties);    &#125;&#125;</code></pre><p><strong>（4）定时从数据库和配置文件中读取配置</strong></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.calvin.task;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.cloud.netflix.zuul.RoutesRefreshedEvent;<span class="hljs-keyword">import</span> org.springframework.cloud.netflix.zuul.filters.RouteLocator;<span class="hljs-keyword">import</span> org.springframework.context.ApplicationEventPublisher;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;<span class="hljs-keyword">import</span> org.springframework.scheduling.annotation.Scheduled;<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 定时从数据库和配置文件中读取配置</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Component</span><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableScheduling</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RefreshRouteTask</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> ApplicationEventPublisher publisher;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> RouteLocator routeLocator;    <span class="hljs-meta">@Scheduled</span>(fixedRate = <span class="hljs-number">5000</span>)    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">refreshRoute</span><span class="hljs-params">()</span> </span>&#123;        RoutesRefreshedEvent routesRefreshedEvent = <span class="hljs-keyword">new</span> RoutesRefreshedEvent(routeLocator);        publisher.publishEvent(routesRefreshedEvent);    &#125;&#125;</code></pre><p>工程启动后，可以看到每隔5秒打印最新的路由信息（路由来源：application.yml已经配置和路由表中）</p><p>![image-20200311204646384](/Users/calvin/Library/Application Support/typora-user-images/image-20200311204646384.png)</p><p><strong>（5）测试是否生效</strong></p><p>浏览器依旧访问：<a href="http://localhost:10010/api/inventory/demo/test" target="_blank" rel="noopener">http://localhost:10010/api/inventory/demo/test</a></p><p>![image-20200311204814473](/Users/calvin/Library/Application Support/typora-user-images/image-20200311204814473.png)</p><p>从结果可以看到 ，已经成功实现了路由从数据库中动态读取。</p><p><strong>代码托管</strong>：<a href="https://gitee.com/calvin1993/distributed-exercise" target="_blank" rel="noopener">https://gitee.com/calvin1993/distributed-exercise</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>网关</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
